///Consider a student database of SEIT class (at least 15 records). Database contains
different fields of every student like Roll No, Name and SGPA.(array of structure)
e) Search a particular student according to name using binary search without
recursion. (all the student records having the presence of search key should be
displayed)
(Note: Implement either Bubble sort or Insertion Sort.)


#include <iostream>
#include <string>

using namespace std;

struct Student {
    int rollNo;
    string name;
    float SGPA;
};

void insertionSort(Student students[], int n) {
    for (int i = 1; i < n; i++) {
        string key = students[i].name;
        int j = i - 1;

        while (j >= 0 && students[j].name > key) {
            students[j + 1] = students[j];
            j = j - 1;
        }

        students[j + 1].name = key;
    }
}

int binarySearch(Student students[], int left, int right, string targetName) {
    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (students[mid].name == targetName) {
            return mid;
        } else if (students[mid].name < targetName) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return -1;
}

void searchStudentByName(Student students[], int n, string targetName) {
    insertionSort(students, n);

    int index = binarySearch(students, 0, n - 1, targetName);

    if (index == -1) {
        cout << "Student not found." << endl;
    } else {
        cout << "Student found:" << endl;
        cout << "Name\tRoll No\tSGPA" << endl;
        cout << "----\t-------\t----" << endl;
        while (index < n && students[index].name == targetName) {
            cout << students[index].name << "\t" << students[index].rollNo << "\t" << students[index].SGPA << endl;
            index++;
        }
    }
}

int main() {
    Student students[15];

    // Populate the student database with data
    // ...

    int n = 15; // Assuming 15 students

    string targetName;
    cout << "Enter the target name: ";
    cin >> targetName;

    searchStudentByName(students, n, targetName);

    return 0;
}
