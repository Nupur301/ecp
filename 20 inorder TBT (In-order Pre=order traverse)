Implement In-order Threaded Binary Tree and traverse it in In-order and Pre-order.

#include <iostream>

using namespace std;

struct Node {
    char data;
    bool leftThread;
    Node* left;
    bool rightThread;
    Node* right;
};

Node* createNode(char data) {
    Node* newNode = new Node;
    newNode->data = data;
    newNode->leftThread = false;
    newNode->rightThread = false;
    newNode->left = nullptr;
    newNode->right = nullptr;
    return newNode;
}

void inOrderTraversal(Node* root) {
    Node* current = root;

    while (current != nullptr) {
        while (current->leftThread && current->left != nullptr) {
            current = current->left;
        }

        cout << current->data << " ";

        if (current->rightThread) {
            current = current->right;
        } else {
            current = current->right;
            while (current != nullptr && current->leftThread) {
                current = current->left;
            }
        }
    }
}

void preOrderTraversal(Node* root) {
    Node* current = root;

    while (current != nullptr) {
        while (!current->leftThread && current->left != nullptr) {
            current = current->left;
        }

        cout << current->data << " ";

        if (current->rightThread) {
            current = current->right;
        } else {
            current = current->right;
            while (current != nullptr && current->leftThread) {
                current = current->left;
            }
        }
    }
}

Node* insert(Node* root, char data) {
    if (root == nullptr) {
        return createNode(data);
    }

    if (data < root->data) {
        if (root->leftThread) {
            Node* newNode = createNode(data);
            newNode->left = root->left;
            newNode->leftThread = root->leftThread;
            root->left = newNode;
            root->leftThread = false;
        } else {
            root->left = insert(root->left, data);
        }
    } else if (data > root->data) {
        if (root->rightThread) {
            Node* newNode = createNode(data);
            newNode->right = root->right;
            newNode->rightThread = root->rightThread;
            root->right = newNode;
            root->rightThread = false;
        } else {
            root->right = insert(root->right, data);
        }
    }

    return root;
}

int main() {
    Node* root = nullptr;

    root = insert(root, 'D');
    root = insert(root, 'B');
    root = insert(root, 'A');
    root = insert(root, 'C');
    root = insert(root, 'F');
    root = insert(root, 'E');

    cout << "In-order traversal: ";
    inOrderTraversal(root);
    cout << endl;

    cout << "Pre-order traversal: ";
    preOrderTraversal(root);
    cout << endl;

    return 0;
}
